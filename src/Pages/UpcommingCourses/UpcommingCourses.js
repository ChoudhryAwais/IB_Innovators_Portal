import React, { useState, useEffect } from "react";
import { db } from "../../firebase";
import {
  collection,
  addDoc,
  setDoc,
  doc,
  deleteDoc,
  onSnapshot,
  updateDoc,
} from "firebase/firestore";
import Pagination from "@mui/material/Pagination";
import Stack from "@mui/material/Stack";

import Button from "@mui/material/Button";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogTitle from "@mui/material/DialogTitle";
import Slide from "@mui/material/Slide";
import toast from "react-hot-toast";
import TopHeading from "../../Components/TopHeading/TopHeading";
import { FormControl, InputLabel, MenuItem, Select, TextField } from "@mui/material";

const Transition = React.forwardRef(function Transition(props, ref) {
  return <Slide direction="up" ref={ref} {...props} />;
});

const FormComponent = () => {
  const [formData, setFormData] = useState({
    heading: "",
    tagline: "",
    startDate: "",
    endDate: "",
    lastDate: "",
    sessionNumber: "",
  });

  const [showModal, setShowModal] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [selectedLink, setSelectedLink] = useState({})
  const [showEditModal, setShowEditModal] = useState(false);
  const [loading, setLoading] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (isEditMode) {
      await updateDoc(doc(db, "UpcomingCourses", selectedCourse.id), formData);
      toast.success("Course updated successfully!");
    } else {
      const coursesRef = collection(db, "UpcomingCourses");
      const docRef = await addDoc(coursesRef, formData);

      // Access the ID generated by Firestore and update the data
      const courseId = docRef.id;
      const updatedFormData = { ...formData, id: courseId };

      // Update the document with the added ID
      await setDoc(doc(db, "UpcomingCourses", courseId), updatedFormData);
      toast.success("Course added successfully!");
    }

    setFormData({
      heading: "",
      tagline: "",
      startDate: "",
      endDate: "",
      lastDate: "",
      sessionNumber: "",
    });
    setIsEditMode(false);
    setShowEditModal(false);
    setSelectedCourse(null);
  };

  const [receivedData, setReceivedData] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      const blogsRef = collection(db, "UpcomingCourses");
      const unsubscribe = onSnapshot(blogsRef, (snapshot) => {
        const blogsArray = snapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setReceivedData(blogsArray);
      });

      return () => {
        // Unsubscribe from the snapshot listener when component unmounts
        unsubscribe();
      };
    };

    fetchData();
  }, []);

  const deleteCourse = async (id) => {
    await deleteDoc(doc(db, "UpcomingCourses", id));
    setShowModal(false);
    toast.success("Course deleted");
  };

  const openEditModal = (course) => {
    setFormData(course);
    setSelectedCourse(course);
    setIsEditMode(true);
    setShowEditModal(true);
  };

  // UPCOMING LESSONS PAGINATION
  const upcomingItemsPerPage = 3;
  const [upcomingCurrentPage, setUpcomingCurrentPage] = useState(1);

  const handleUpcomingChangePage = (event, newPage) => {
    setUpcomingCurrentPage(newPage);
  };

  const upcomingStartIndex = (upcomingCurrentPage - 1) * upcomingItemsPerPage;
  const upcomingEndIndex = upcomingStartIndex + upcomingItemsPerPage;
  const upcomingDisplayedSessions = receivedData?.slice(
    upcomingStartIndex,
    upcomingEndIndex
  );

  const options=[
    "Summer Course",
    "Rapid Revision Course",
    "Winter Bootcamp",
    "Spring Short Course & Paper Practice Session"
  ]

  return (
    <>
      <TopHeading>Upcoming Courses</TopHeading>

      <div
        style={{
          display: "flex",
          paddingTop: "0px",
          flexWrap: "wrap",
          gap: "10px",
          marginRight: "10px",
          marginBottom: "20px",
          flex: 1,
        }}
      >
        <div
          className="shadowAndBorder"
          style={{
            marginTop: "0px",
            flex: 1,
            height: "max-content",
            boxShadow: "0 6px 12px rgba(0, 0, 0, 0.3)",
            background: "rgba(255,255,255, 0.5)",
            backdropFilter: "blur(4px)", // Adjust the blur intensity as needed
            WebkitBackdropFilter: "blur(4px)", // For Safari support,
            padding: "10px",
            borderRadius: "10px",
            marginBottom: "10px",
          }}
        >
          <h2 style={{ textAlign: "left" }}>Create Course</h2>
          <form style={{ display: "flex", flexDirection: "column", padding: "10px", marginTop: "1rem" }} onSubmit={handleSubmit}>
            {/* <TextField
              label="Heading"
              name="heading"
              value={formData.heading}
              onChange={handleChange}
              style={{ marginBottom: "10px" }}
              fullWidth
            /> */}
            <FormControl>
              <InputLabel>Select Course</InputLabel>
              <Select
              label="Select Course"
              name="heading"
              value={formData?.heading}
              onChange={handleChange}
              style={{ marginBottom: "10px" }}
              fullWidth
              >
                {options?.map((e) =>
                <MenuItem key={e} value={e}>{e}</MenuItem>
                )}
              </Select>
            </FormControl>

            <TextField
              label="Tagline"
              name="tagline"
              value={formData.tagline}
              onChange={handleChange}
              style={{ marginBottom: "10px" }}
              fullWidth
            />
            <TextField
              label="Start Date"
              name="startDate"
              type="date"
              value={formData.startDate}
              onChange={handleChange}
              style={{ marginBottom: "10px" }}
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              label="End Date"
              name="endDate"
              type="date"
              value={formData.endDate}
              onChange={handleChange}
              style={{ marginBottom: "10px" }}
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              label="Last Date"
              name="lastDate"
              type="date"
              value={formData.lastDate}
              onChange={handleChange}
              style={{ marginBottom: "10px" }}
              fullWidth
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              label="Session Number"
              name="sessionNumber"
              value={formData.sessionNumber}
              onChange={handleChange}
              style={{ marginBottom: "10px" }}
              fullWidth
            />
            <Button variant="contained" type="submit" style={{ width: '100%', marginTop: '20px' }}>
              {isEditMode ? "Update Course" : "Submit"}
            </Button>
          </form>
        </div>

        <div
          className="shadowAndBorder"
          style={{
            marginTop: "0px",
            flex: 1,
            height: "max-content",
            boxShadow: "0 6px 12px rgba(0, 0, 0, 0.3)",
            background: 'rgba(255,255,255, 0.5)',
            backdropFilter: 'blur(4px)', // Adjust the blur intensity as needed
            WebkitBackdropFilter: 'blur(4px)', // For Safari support,
            padding: '10px',
            borderRadius: '10px',
            marginBottom: '10px'
          }}
        >
          <h2 style={{ textAlign: "left" }}>Upcoming Courses</h2>
          <div style={{ margin: "10px" }}>
            {receivedData.length > 0 && (
              <div>
                {upcomingDisplayedSessions.map((item, index) => (
                  <div
                    key={index}
                    style={{
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                      padding: "10px",
                      borderTop: index !== 0 ? "2px solid #ccc" : 'none',
                      flex: 1,
                    }}
                  >
                    <div style={{ flex: 3 }}>
                      <p
                        style={{
                          verticalAlign: "middle",
                          fontWeight: "bold",
                          fontSize: "1.2rem",
                        }}
                      >
                        {item.heading}
                      </p>
                      <div>Tagline: {item.tagline}</div>
                      <div>Start Date: {item.startDate}</div>
                      <div>End Date: {item.endDate}</div>
                      <div>Last Date: {item.lastDate}</div>
                    </div>
                    <div
                      style={{
                        flex: 1,
                        display: "flex",
                        flexDirection: 'column',
                        gap: '10px',
                      }}
                    >
                      
                      <Button
                        variant="outlined"
                        style={{width: '100%'}}
                        onClick={() => openEditModal(item)}
                      >
                        Edit
                      </Button>

                      <Button
                        variant="outlined"
                        color="error"
                        style={{width: '100%'}}
                        onClick={() => {
                          setShowModal(true);
                          setSelectedLink(item);
                        }}
                      >
                        Delete
                      </Button>
                    </div>
                  </div>
                ))}

                {receivedData?.length > upcomingItemsPerPage && (
                  <div
                    style={{
                      flex: 1,
                      alignItems: "center",
                      justifyContent: "center",
                      display: "flex",
                      marginTop: "20px",
                    }}
                  >
                    <Stack spacing={2}>
                      <Pagination
                        count={Math.ceil(
                          receivedData?.length / upcomingItemsPerPage
                        )}
                        page={upcomingCurrentPage}
                        onChange={handleUpcomingChangePage}
                      />
                    </Stack>
                  </div>
                )}

              </div>
            )}

            
{receivedData?.length === 0 && (
                  <div
                    style={{
                      flex: 1,
                      textAlign: "center",
                      color: "#ccc",
                      fontSize: "1.5rem",
                    }}
                  >
                    No Courses
                  </div>
                )}
          </div>
        </div>

        
        <Dialog
          open={showEditModal}
          TransitionComponent={Transition}
          keepMounted
          onClose={() => {
            setShowEditModal(false);
            setIsEditMode(false);
            setFormData({
              heading: "",
              tagline: "",
              startDate: "",
              endDate: "",
              lastDate: "",
              sessionNumber: "",
            });
          }}
          aria-describedby="alert-dialog-slide-description"
        >
          <DialogTitle>
            Edit Course
          </DialogTitle>
            <form style={{ padding: "20px" }} onSubmit={handleSubmit}>
              <TextField
                label="Heading"
                name="heading"
                value={formData.heading}
                onChange={handleChange}
                fullWidth
                style={{ marginBottom: "10px" }}
              />
              <TextField
                label="Tagline"
                name="tagline"
                value={formData.tagline}
                onChange={handleChange}
                fullWidth
                style={{ marginBottom: "10px" }}
              />
              <TextField
                label="Start Date"
                name="startDate"
                type="date"
                value={formData.startDate}
                onChange={handleChange}
                fullWidth
                style={{ marginBottom: "10px" }}
                InputLabelProps={{ shrink: true }}
              />
              <TextField
                label="End Date"
                name="endDate"
                type="date"
                value={formData.endDate}
                onChange={handleChange}
                fullWidth
                style={{ marginBottom: "10px" }}
                InputLabelProps={{ shrink: true }}
              />
              <TextField
                label="Last Date"
                name="lastDate"
                type="date"
                value={formData.lastDate}
                onChange={handleChange}
                fullWidth
                style={{ marginBottom: "10px" }}
                InputLabelProps={{ shrink: true }}
              />
              <TextField
                label="Session Number"
                name="sessionNumber"
                value={formData.sessionNumber}
                onChange={handleChange}
                fullWidth
                style={{ marginBottom: "10px" }}
              />
              <DialogActions>
                <Button
                  variant="outlined"
                  onClick={() => {
                    setShowEditModal(false);
                    setIsEditMode(false);
                    setFormData({
                      heading: "",
                      tagline: "",
                      startDate: "",
                      endDate: "",
                      lastDate: "",
                      sessionNumber: "",
                    });
                  }}
                >
                  Cancel
                </Button>
                <Button variant="contained" type="submit">
                  Save
                </Button>
              </DialogActions>
            </form>
        </Dialog>

        <Dialog
          open={showModal}
          TransitionComponent={Transition}
          keepMounted
          onClose={() => {
            setShowModal(false);
          }}
          aria-describedby="alert-dialog-slide-description"
        >
          <DialogTitle>
              Please confirm if you want to delete this course?
          </DialogTitle>
            <DialogActions>
              <Button
                variant="outlined"
                onClick={() => {
                  setShowModal(false);
                }}
              >
                Cancel
              </Button>
              <Button
                variant="contained"
                color="error"
                onClick={() => deleteCourse(selectedLink?.id)}
              >
                Delete
              </Button>
            </DialogActions>
        </Dialog>
      </div>
    </>
  );
};

export default FormComponent;
